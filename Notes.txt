- The instaceof check if left operand is the same class or interface (or a subclass).

Functional Interface
- An interface that contains a single abstract method.
- Interfaces marked as FunctionalInterface with no abstract method or with more than one method declared, will generate a compile error.
- Marking the interface with @FunctionalInterface is optional, but is recommend to do so.
- Functional Interfaces can be extended, if no method is added to the interface, abstract method can be overidden and it is allowed to have default method and static methods in the interface.

Deferred execution
- Means that the code is specified now but runs later.

Lambda Expressions
- The parentheses can be omitted if there is exactly one input parameter and the type is not explicity stated in the expression.
- Expression that have zero or more parameters requires the parenthesis.
- If you need to write more than one line of code in a lambde, you must enclose it with braces {}.
- When have braces {} in your code, you must finish all statements with semicolon;
- When the abstract method return something, you must end the lambda with return statement.
- return statement is optional when the return type of the method is void.
- We cannot re-declare a local variable in lambda expression.

Polymorphism
- Ability of a single interface to support multiple underlying forms.

Casting variables
- Casting a object from a subclass to a superclass doesn't require an explicit cast.
- Casting a object from a superclass to a subclass requires an explicit cast.
- The compiler will not allow casts to unrelated types.
- Even when the code compiles without issue, an exception may be thrown at runtime if the object being cast is not actually an instance of that class.

JavaBeans convention
- Properties are private.
- Getter for non-boolean properties begins with get.
- Getter for boolean properties begins with is or get.
- Setter methods begin with set.
- The method name must have a prefix of set/get/is followed by the first letter of the property in uppercase and followed by the rest of the property name.

Is-A Relationship
- Known as inheritance test.

Has-A Relationship
- Known as the object composition test
- The property of an object having a named data object or primitive as a member.

Object Composition
- Construct a class using the references to other classes in order to reuse the functionality of the other classes.

Immutable Pattern
- Use a constructor to set all properties of the object.
- Mark all of the instances variables private and final.
- Don't define any setter methods.
- Don't allow referenced mutable objects to be modified or accessed directly.
- Prevent methods from being overriden.

Generics
- The sintax for generics is to declare a formal type parameter in angle brackets <>.

Unbounded Wildcard
- Represents any data.
- Use "?" when you want to specify that any data is OK with you.

Upper-Bounded Wildcard
- Represented by "? extends <object_type>"

List
- It's an ordered collection of elements that allows duplicated entries.
- Elements in a list can be accessed by an int index.
- Elements are ordered by index
- Has no keys and values pair.
- Doesn't need to add/remove in a specific order.

Set
- It's a collection that doesn't allow duplicate entries.
- Its elements aren't ordered.
- Has no keys and values pair.
- Doesn't need to add/remove in a specific order.  

Queue
- It's a collection that orders its elements in a specific order for processing.
- Typically queues processes its elements using FIFO order, but it can be changed.
- Has no keys and values pair.
- Need to add/remove in a specific order.
- It's ordered in a defined order.

Map
- It's a collection that maps keys to values, with no duplicated keys allowed.
- The elements in a map are key/value pairs.
- Doesn't need to add/remove in a specific order.

ArrayList
- Extends implements List
- It's not sorted
- Doesn't call hashCode
- Doesn't call compareTo
- Allows null elements

ArrayDeque
- Extends implements Queue
- It's not sorted
- Doesn't call hashCode
- Doesn't call compareTo
- Doesn't allows null elements

HashMap
- Extends implements Map
- It's not sorted
- It calls hashCode
- Doesn't call compareTo
- Allows null elements
 
HashSet
- Extends implements Set
- It's not sorted
- It calls hashCode
- Doesn't call compareTo
- Allows null elements

Hashtable
- Extends implements Map
- It's not sorted
- It calls hashCode
- Doesn't call compareTo
- Doesn't allows null elements

LinkedList
- Extends implements List, Queue
- It's not sorted
- Doesn't call hashCode
- Doesn't call compareTo
- Allows null elements

Stack
- Extends implements List
- It's not sorted
- Doesn't call hashCode
- Doesn't call compareTo
- Allows null elements

TreeMap
- Extends implements Map
- It's sorted
- Doesn't calls hashCode
- It calls compareTo
- Doesn't allows null elements

TreeSet
- Extends implements Set
- It's sorted
- Doesn't calls hashCode
- It calls compareTo
- Doesn't allows null elements

Vector
- Extends implements List
- It's not sorted
- Doesn't call hashCode
- Doesn't call compareTo
- Allows null elements

compareTo()
- Number 0 is returned when the current object is equal to the argument to compareTo().
- Number less than 0 is returned when the current object is smaller than the argument to compareTo().
- Number greater than 0 is returned when the current object is larger than the argument to compareTo().

Comparable
- Located in java.lang package
- Interface must be implemented by a class
- Method name is compareTo
- It takes 1 parameters
- It's not declared as a lambda expression.

Comparator
- Located in java.util
- Must not be implemented by a class
- Method name is compare
- It take 2 parameters
- It`s commonly declared using lambdas

Method Reference
- Static methods
- Instance methods on a particular instance
- Instance methods on an instance to be determined at runtime
- Constructors

Supplier
- Used when we want to generate or supply values without taking any input
- Takes no parameter
- Return T
- Abstract method name is get

Consumers
- Used when you want to do something with the parameter but not return anything.
- Takes 1 parameter in Consumer<T> and 2 parameters in BiConsumer<T,U>
- Return nothing
- Abstract method name is accept

Predicate
- Used when you want to test a condition
- Takes 1 parameter in Predicate<T> and 2 parameters in BiPredicate<T,U>
- Return boolean
- Abstract method name is test

Function
- Used when you need to turn one/two parameter into a value of a potentially different type and return it.
- Takes 1 parameter in Function<T> and 2 parameters in BiFunction<T,U>
- Return T
- Abstract method name is apply

Unary
- Used when you need to transform its value into one of the same type
- Extends Function and BiFunction
- Require all type parameter to be the same type.

Stream
- Stream in Java is a sequence of data
- A Stream Pipelineis the operations that run on a stream to produce the result.
- Finite streams has a limit. Infinite streams doesn't end.
- There are 3 parts to a stream pipeline:
  - Source: where the stream comes from.
  - Intermediate operations: Transforms the stream into another one. Can have few or many operations.
  - Terminal Operation: Actually produces a result.
  
LocalDate
- Contains only a date (no time and no timezone)
- Can only add and substract from date values

LocalTime
- Contains only a time (no date and no timezone)
- Can only add and substract from time values

LocalDateTime
- Contains both a date and a time (no timezone)
- Can add and substract from both date and time values

ZonedDateTime
- Contains date, time and timezone
- Can add and substract from both date and time values